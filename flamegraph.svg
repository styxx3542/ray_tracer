<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="496"><g><title>ch7`DYLD-STUB$$free (1 samples, 0.20%)</title><rect x="0.0000%" y="197" width="0.2016%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>ch7`DYLD-STUB$$free (2 samples, 0.40%)</title><rect x="0.2016%" y="181" width="0.4032%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.4516%" y="191.50"></text></g><g><title>ch7`DYLD-STUB$$memcpy (1 samples, 0.20%)</title><rect x="0.6048%" y="181" width="0.2016%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.8548%" y="191.50"></text></g><g><title>ch7`alloc::fmt::format::format_inner (1 samples, 0.20%)</title><rect x="0.8065%" y="181" width="0.2016%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="1.0565%" y="191.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.40%)</title><rect x="1.0081%" y="181" width="0.4032%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="2"/><text x="1.2581%" y="191.50"></text></g><g><title>ch7`core::str::_&lt;impl str&gt;::trim_matches (1 samples, 0.20%)</title><rect x="1.4113%" y="181" width="0.2016%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="1"/><text x="1.6613%" y="191.50"></text></g><g><title>ch7`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.40%)</title><rect x="4.6371%" y="149" width="0.4032%" height="15" fill="rgb(207,160,47)" fg:x="23" fg:w="2"/><text x="4.8871%" y="159.50"></text></g><g><title>ch7`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.60%)</title><rect x="6.2500%" y="133" width="0.6048%" height="15" fill="rgb(228,23,34)" fg:x="31" fg:w="3"/><text x="6.5000%" y="143.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.40%)</title><rect x="6.4516%" y="117" width="0.4032%" height="15" fill="rgb(218,30,26)" fg:x="32" fg:w="2"/><text x="6.7016%" y="127.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (2 samples, 0.40%)</title><rect x="6.4516%" y="101" width="0.4032%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="2"/><text x="6.7016%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.40%)</title><rect x="6.4516%" y="85" width="0.4032%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="2"/><text x="6.7016%" y="95.50"></text></g><g><title>ch7`DYLD-STUB$$memcpy (1 samples, 0.20%)</title><rect x="6.8548%" y="133" width="0.2016%" height="15" fill="rgb(240,193,28)" fg:x="34" fg:w="1"/><text x="7.1048%" y="143.50"></text></g><g><title>ch7`core::fmt::Formatter::pad_integral (5 samples, 1.01%)</title><rect x="7.0565%" y="133" width="1.0081%" height="15" fill="rgb(216,20,37)" fg:x="35" fg:w="5"/><text x="7.3065%" y="143.50"></text></g><g><title>ch7`DYLD-STUB$$malloc (1 samples, 0.20%)</title><rect x="9.0726%" y="85" width="0.2016%" height="15" fill="rgb(206,188,39)" fg:x="45" fg:w="1"/><text x="9.3226%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.20%)</title><rect x="9.6774%" y="69" width="0.2016%" height="15" fill="rgb(217,207,13)" fg:x="48" fg:w="1"/><text x="9.9274%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.81%)</title><rect x="9.8790%" y="69" width="0.8065%" height="15" fill="rgb(231,73,38)" fg:x="49" fg:w="4"/><text x="10.1290%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.81%)</title><rect x="11.0887%" y="37" width="0.8065%" height="15" fill="rgb(225,20,46)" fg:x="55" fg:w="4"/><text x="11.3387%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 1.61%)</title><rect x="11.0887%" y="53" width="1.6129%" height="15" fill="rgb(210,31,41)" fg:x="55" fg:w="8"/><text x="11.3387%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.81%)</title><rect x="11.8952%" y="37" width="0.8065%" height="15" fill="rgb(221,200,47)" fg:x="59" fg:w="4"/><text x="12.1452%" y="47.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (18 samples, 3.63%)</title><rect x="9.2742%" y="85" width="3.6290%" height="15" fill="rgb(226,26,5)" fg:x="46" fg:w="18"/><text x="9.5242%" y="95.50">ch7`..</text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 2.22%)</title><rect x="10.6855%" y="69" width="2.2177%" height="15" fill="rgb(249,33,26)" fg:x="53" fg:w="11"/><text x="10.9355%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.20%)</title><rect x="12.7016%" y="53" width="0.2016%" height="15" fill="rgb(235,183,28)" fg:x="63" fg:w="1"/><text x="12.9516%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.81%)</title><rect x="12.9032%" y="85" width="0.8065%" height="15" fill="rgb(221,5,38)" fg:x="64" fg:w="4"/><text x="13.1532%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.60%)</title><rect x="13.7097%" y="85" width="0.6048%" height="15" fill="rgb(247,18,42)" fg:x="68" fg:w="3"/><text x="13.9597%" y="95.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 5.44%)</title><rect x="9.0726%" y="101" width="5.4435%" height="15" fill="rgb(241,131,45)" fg:x="45" fg:w="27"/><text x="9.3226%" y="111.50">ch7`all..</text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.20%)</title><rect x="14.3145%" y="85" width="0.2016%" height="15" fill="rgb(249,31,29)" fg:x="71" fg:w="1"/><text x="14.5645%" y="95.50"></text></g><g><title>ch7`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (30 samples, 6.05%)</title><rect x="8.8710%" y="117" width="6.0484%" height="15" fill="rgb(225,111,53)" fg:x="44" fg:w="30"/><text x="9.1210%" y="127.50">ch7`&lt;all..</text></g><g><title>ch7`alloc::raw_vec::finish_grow (2 samples, 0.40%)</title><rect x="14.5161%" y="101" width="0.4032%" height="15" fill="rgb(238,160,17)" fg:x="72" fg:w="2"/><text x="14.7661%" y="111.50"></text></g><g><title>ch7`DYLD-STUB$$memcpy (3 samples, 0.60%)</title><rect x="14.9194%" y="117" width="0.6048%" height="15" fill="rgb(214,148,48)" fg:x="74" fg:w="3"/><text x="15.1694%" y="127.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.20%)</title><rect x="15.5242%" y="117" width="0.2016%" height="15" fill="rgb(232,36,49)" fg:x="77" fg:w="1"/><text x="15.7742%" y="127.50"></text></g><g><title>ch7`core::fmt::Formatter::pad_integral (8 samples, 1.61%)</title><rect x="15.7258%" y="117" width="1.6129%" height="15" fill="rgb(209,103,24)" fg:x="78" fg:w="8"/><text x="15.9758%" y="127.50"></text></g><g><title>ch7`core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.40%)</title><rect x="17.3387%" y="117" width="0.4032%" height="15" fill="rgb(229,88,8)" fg:x="86" fg:w="2"/><text x="17.5887%" y="127.50"></text></g><g><title>ch7`core::fmt::Formatter::pad_integral (3 samples, 0.60%)</title><rect x="17.7419%" y="117" width="0.6048%" height="15" fill="rgb(213,181,19)" fg:x="88" fg:w="3"/><text x="17.9919%" y="127.50"></text></g><g><title>ch7`core::fmt::Formatter::pad_integral::write_prefix (3 samples, 0.60%)</title><rect x="17.7419%" y="101" width="0.6048%" height="15" fill="rgb(254,191,54)" fg:x="88" fg:w="3"/><text x="17.9919%" y="111.50"></text></g><g><title>ch7`core::fmt::num::imp::_&lt;impl core::fmt::Display for u8&gt;::fmt (60 samples, 12.10%)</title><rect x="8.0645%" y="133" width="12.0968%" height="15" fill="rgb(241,83,37)" fg:x="40" fg:w="60"/><text x="8.3145%" y="143.50">ch7`core::fmt::num..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 1.81%)</title><rect x="18.3468%" y="117" width="1.8145%" height="15" fill="rgb(233,36,39)" fg:x="91" fg:w="9"/><text x="18.5968%" y="127.50">l..</text></g><g><title>ch7`alloc::fmt::format::format_inner (87 samples, 17.54%)</title><rect x="4.0323%" y="165" width="17.5403%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="87"/><text x="4.2823%" y="175.50">ch7`alloc::fmt::format::for..</text></g><g><title>ch7`core::fmt::write (82 samples, 16.53%)</title><rect x="5.0403%" y="149" width="16.5323%" height="15" fill="rgb(245,192,40)" fg:x="25" fg:w="82"/><text x="5.2903%" y="159.50">ch7`core::fmt::write</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 1.41%)</title><rect x="20.1613%" y="133" width="1.4113%" height="15" fill="rgb(238,167,29)" fg:x="100" fg:w="7"/><text x="20.4113%" y="143.50"></text></g><g><title>ch7`DYLD-STUB$$realloc (1 samples, 0.20%)</title><rect x="21.7742%" y="149" width="0.2016%" height="15" fill="rgb(232,182,51)" fg:x="108" fg:w="1"/><text x="22.0242%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.40%)</title><rect x="22.1774%" y="133" width="0.4032%" height="15" fill="rgb(231,60,39)" fg:x="110" fg:w="2"/><text x="22.4274%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.20%)</title><rect x="22.9839%" y="101" width="0.2016%" height="15" fill="rgb(208,69,12)" fg:x="114" fg:w="1"/><text x="23.2339%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 1.01%)</title><rect x="23.1855%" y="101" width="1.0081%" height="15" fill="rgb(235,93,37)" fg:x="115" fg:w="5"/><text x="23.4355%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.40%)</title><rect x="24.1935%" y="101" width="0.4032%" height="15" fill="rgb(213,116,39)" fg:x="120" fg:w="2"/><text x="24.4435%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.60%)</title><rect x="25.0000%" y="85" width="0.6048%" height="15" fill="rgb(222,207,29)" fg:x="124" fg:w="3"/><text x="25.2500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 1.41%)</title><rect x="24.5968%" y="101" width="1.4113%" height="15" fill="rgb(206,96,30)" fg:x="122" fg:w="7"/><text x="24.8468%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.40%)</title><rect x="25.6048%" y="85" width="0.4032%" height="15" fill="rgb(218,138,4)" fg:x="127" fg:w="2"/><text x="25.8548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (18 samples, 3.63%)</title><rect x="22.7823%" y="117" width="3.6290%" height="15" fill="rgb(250,191,14)" fg:x="113" fg:w="18"/><text x="23.0323%" y="127.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.40%)</title><rect x="26.0081%" y="101" width="0.4032%" height="15" fill="rgb(239,60,40)" fg:x="129" fg:w="2"/><text x="26.2581%" y="111.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (25 samples, 5.04%)</title><rect x="21.9758%" y="149" width="5.0403%" height="15" fill="rgb(206,27,48)" fg:x="109" fg:w="25"/><text x="22.2258%" y="159.50">ch7`al..</text></g><g><title>libsystem_malloc.dylib`realloc (22 samples, 4.44%)</title><rect x="22.5806%" y="133" width="4.4355%" height="15" fill="rgb(225,35,8)" fg:x="112" fg:w="22"/><text x="22.8306%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.60%)</title><rect x="26.4113%" y="117" width="0.6048%" height="15" fill="rgb(250,213,24)" fg:x="131" fg:w="3"/><text x="26.6613%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.20%)</title><rect x="27.0161%" y="149" width="0.2016%" height="15" fill="rgb(247,123,22)" fg:x="134" fg:w="1"/><text x="27.2661%" y="159.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (29 samples, 5.85%)</title><rect x="21.5726%" y="165" width="5.8468%" height="15" fill="rgb(231,138,38)" fg:x="107" fg:w="29"/><text x="21.8226%" y="175.50">ch7`all..</text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.20%)</title><rect x="27.2177%" y="149" width="0.2016%" height="15" fill="rgb(231,145,46)" fg:x="135" fg:w="1"/><text x="27.4677%" y="159.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="27.4194%" y="165" width="0.2016%" height="15" fill="rgb(251,118,11)" fg:x="136" fg:w="1"/><text x="27.6694%" y="175.50"></text></g><g><title>ch7`core::fmt::write (2 samples, 0.40%)</title><rect x="27.6210%" y="165" width="0.4032%" height="15" fill="rgb(217,147,25)" fg:x="137" fg:w="2"/><text x="27.8710%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 3.23%)</title><rect x="28.0242%" y="165" width="3.2258%" height="15" fill="rgb(247,81,37)" fg:x="139" fg:w="16"/><text x="28.2742%" y="175.50">lib..</text></g><g><title>ch7`ray_tracer::primitives::canvas::Canvas::to_ppm (148 samples, 29.84%)</title><rect x="1.6129%" y="181" width="29.8387%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="148"/><text x="1.8629%" y="191.50">ch7`ray_tracer::primitives::canvas::Canvas::to_p..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.20%)</title><rect x="31.2500%" y="165" width="0.2016%" height="15" fill="rgb(227,1,9)" fg:x="155" fg:w="1"/><text x="31.5000%" y="175.50"></text></g><g><title>ch7`std::fs::OpenOptions::_open (1 samples, 0.20%)</title><rect x="31.4516%" y="181" width="0.2016%" height="15" fill="rgb(248,47,43)" fg:x="156" fg:w="1"/><text x="31.7016%" y="191.50"></text></g><g><title>ch7`std::sys::unix::fs::File::open_c (1 samples, 0.20%)</title><rect x="31.4516%" y="165" width="0.2016%" height="15" fill="rgb(221,10,30)" fg:x="156" fg:w="1"/><text x="31.7016%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.20%)</title><rect x="31.4516%" y="149" width="0.2016%" height="15" fill="rgb(210,229,1)" fg:x="156" fg:w="1"/><text x="31.7016%" y="159.50"></text></g><g><title>ch7`std::io::Write::write_all (2 samples, 0.40%)</title><rect x="31.6532%" y="181" width="0.4032%" height="15" fill="rgb(222,148,37)" fg:x="157" fg:w="2"/><text x="31.9032%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.40%)</title><rect x="31.6532%" y="165" width="0.4032%" height="15" fill="rgb(234,67,33)" fg:x="157" fg:w="2"/><text x="31.9032%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.60%)</title><rect x="32.0565%" y="181" width="0.6048%" height="15" fill="rgb(247,98,35)" fg:x="159" fg:w="3"/><text x="32.3065%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 1.21%)</title><rect x="32.6613%" y="181" width="1.2097%" height="15" fill="rgb(247,138,52)" fg:x="162" fg:w="6"/><text x="32.9113%" y="191.50"></text></g><g><title>ch7`ray_tracer::primitives::canvas::Canvas::save_as_ppm (169 samples, 34.07%)</title><rect x="0.2016%" y="197" width="34.0726%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="169"/><text x="0.4516%" y="207.50">ch7`ray_tracer::primitives::canvas::Canvas::save_as_ppm</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.40%)</title><rect x="33.8710%" y="181" width="0.4032%" height="15" fill="rgb(246,177,23)" fg:x="168" fg:w="2"/><text x="34.1210%" y="191.50"></text></g><g><title>ch7`ray_tracer::rtc::intersection::IntersectionState::prepare_computations (10 samples, 2.02%)</title><rect x="35.8871%" y="181" width="2.0161%" height="15" fill="rgb(230,62,27)" fg:x="178" fg:w="10"/><text x="36.1371%" y="191.50">c..</text></g><g><title>ch7`DYLD-STUB$$free (1 samples, 0.20%)</title><rect x="38.7097%" y="165" width="0.2016%" height="15" fill="rgb(216,154,8)" fg:x="192" fg:w="1"/><text x="38.9597%" y="175.50"></text></g><g><title>ch7`core::slice::sort::recurse (6 samples, 1.21%)</title><rect x="38.9113%" y="165" width="1.2097%" height="15" fill="rgb(244,35,45)" fg:x="193" fg:w="6"/><text x="39.1613%" y="175.50"></text></g><g><title>ch7`ray_tracer::rtc::material::Material::lighting (11 samples, 2.22%)</title><rect x="40.1210%" y="165" width="2.2177%" height="15" fill="rgb(251,115,12)" fg:x="199" fg:w="11"/><text x="40.3710%" y="175.50">c..</text></g><g><title>ch7`ray_tracer::rtc::pattern::Pattern::pattern_at (3 samples, 0.60%)</title><rect x="41.7339%" y="149" width="0.6048%" height="15" fill="rgb(240,54,50)" fg:x="207" fg:w="3"/><text x="41.9839%" y="159.50"></text></g><g><title>ch7`ray_tracer::rtc::object::Object::intersect (1 samples, 0.20%)</title><rect x="42.3387%" y="165" width="0.2016%" height="15" fill="rgb(233,84,52)" fg:x="210" fg:w="1"/><text x="42.5887%" y="175.50"></text></g><g><title>ch7`__rdl_alloc (2 samples, 0.40%)</title><rect x="43.9516%" y="133" width="0.4032%" height="15" fill="rgb(207,117,47)" fg:x="218" fg:w="2"/><text x="44.2016%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.60%)</title><rect x="44.3548%" y="133" width="0.6048%" height="15" fill="rgb(249,43,39)" fg:x="220" fg:w="3"/><text x="44.6048%" y="143.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 2.42%)</title><rect x="43.7500%" y="149" width="2.4194%" height="15" fill="rgb(209,38,44)" fg:x="217" fg:w="12"/><text x="44.0000%" y="159.50">ch..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 1.21%)</title><rect x="44.9597%" y="133" width="1.2097%" height="15" fill="rgb(236,212,23)" fg:x="223" fg:w="6"/><text x="45.2097%" y="143.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.60%)</title><rect x="46.1694%" y="149" width="0.6048%" height="15" fill="rgb(242,79,21)" fg:x="229" fg:w="3"/><text x="46.4194%" y="159.50"></text></g><g><title>ch7`core::slice::sort::recurse (3 samples, 0.60%)</title><rect x="46.7742%" y="149" width="0.6048%" height="15" fill="rgb(211,96,35)" fg:x="232" fg:w="3"/><text x="47.0242%" y="159.50"></text></g><g><title>ch7`core::slice::sort::insertion_sort_shift_left (3 samples, 0.60%)</title><rect x="46.7742%" y="133" width="0.6048%" height="15" fill="rgb(253,215,40)" fg:x="232" fg:w="3"/><text x="47.0242%" y="143.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (2 samples, 0.40%)</title><rect x="52.6210%" y="117" width="0.4032%" height="15" fill="rgb(211,81,21)" fg:x="261" fg:w="2"/><text x="52.8710%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.40%)</title><rect x="53.0242%" y="117" width="0.4032%" height="15" fill="rgb(208,190,38)" fg:x="263" fg:w="2"/><text x="53.2742%" y="127.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 2.62%)</title><rect x="51.8145%" y="133" width="2.6210%" height="15" fill="rgb(235,213,38)" fg:x="257" fg:w="13"/><text x="52.0645%" y="143.50">ch..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 1.01%)</title><rect x="53.4274%" y="117" width="1.0081%" height="15" fill="rgb(237,122,38)" fg:x="265" fg:w="5"/><text x="53.6774%" y="127.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="56.6532%" y="101" width="0.2016%" height="15" fill="rgb(244,218,35)" fg:x="281" fg:w="1"/><text x="56.9032%" y="111.50"></text></g><g><title>ch7`ray_tracer::rtc::object::Object::intersect (48 samples, 9.68%)</title><rect x="47.3790%" y="149" width="9.6774%" height="15" fill="rgb(240,68,47)" fg:x="235" fg:w="48"/><text x="47.6290%" y="159.50">ch7`ray_tracer..</text></g><g><title>ch7`ray_tracer::rtc::shapes::sphere::Sphere::intersect (13 samples, 2.62%)</title><rect x="54.4355%" y="133" width="2.6210%" height="15" fill="rgb(210,16,53)" fg:x="270" fg:w="13"/><text x="54.6855%" y="143.50">ch..</text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.40%)</title><rect x="56.6532%" y="117" width="0.4032%" height="15" fill="rgb(235,124,12)" fg:x="281" fg:w="2"/><text x="56.9032%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.20%)</title><rect x="56.8548%" y="101" width="0.2016%" height="15" fill="rgb(224,169,11)" fg:x="282" fg:w="1"/><text x="57.1048%" y="111.50"></text></g><g><title>ch7`ray_tracer::rtc::shapes::sphere::Sphere::intersect (1 samples, 0.20%)</title><rect x="57.0565%" y="149" width="0.2016%" height="15" fill="rgb(250,166,2)" fg:x="283" fg:w="1"/><text x="57.3065%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.40%)</title><rect x="57.2581%" y="149" width="0.4032%" height="15" fill="rgb(242,216,29)" fg:x="284" fg:w="2"/><text x="57.5081%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.81%)</title><rect x="57.6613%" y="149" width="0.8065%" height="15" fill="rgb(230,116,27)" fg:x="286" fg:w="4"/><text x="57.9113%" y="159.50"></text></g><g><title>ch7`ray_tracer::rtc::world::World::intersect (88 samples, 17.74%)</title><rect x="42.5403%" y="165" width="17.7419%" height="15" fill="rgb(228,99,48)" fg:x="211" fg:w="88"/><text x="42.7903%" y="175.50">ch7`ray_tracer::rtc::world::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 1.81%)</title><rect x="58.4677%" y="149" width="1.8145%" height="15" fill="rgb(253,11,6)" fg:x="290" fg:w="9"/><text x="58.7177%" y="159.50">l..</text></g><g><title>ch7`DYLD-STUB$$free (1 samples, 0.20%)</title><rect x="60.6855%" y="149" width="0.2016%" height="15" fill="rgb(247,143,39)" fg:x="301" fg:w="1"/><text x="60.9355%" y="159.50"></text></g><g><title>ch7`DYLD-STUB$$memcpy (3 samples, 0.60%)</title><rect x="60.8871%" y="149" width="0.6048%" height="15" fill="rgb(236,97,10)" fg:x="302" fg:w="3"/><text x="61.1371%" y="159.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.20%)</title><rect x="61.4919%" y="149" width="0.2016%" height="15" fill="rgb(233,208,19)" fg:x="305" fg:w="1"/><text x="61.7419%" y="159.50"></text></g><g><title>ch7`core::slice::sort::recurse (3 samples, 0.60%)</title><rect x="61.6935%" y="149" width="0.6048%" height="15" fill="rgb(216,164,2)" fg:x="306" fg:w="3"/><text x="61.9435%" y="159.50"></text></g><g><title>ch7`ray_tracer::rtc::object::Object::intersect (1 samples, 0.20%)</title><rect x="62.2984%" y="149" width="0.2016%" height="15" fill="rgb(220,129,5)" fg:x="309" fg:w="1"/><text x="62.5484%" y="159.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="63.7097%" y="117" width="0.2016%" height="15" fill="rgb(242,17,10)" fg:x="316" fg:w="1"/><text x="63.9597%" y="127.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 1.41%)</title><rect x="63.7097%" y="133" width="1.4113%" height="15" fill="rgb(242,107,0)" fg:x="316" fg:w="7"/><text x="63.9597%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 1.21%)</title><rect x="63.9113%" y="117" width="1.2097%" height="15" fill="rgb(251,28,31)" fg:x="317" fg:w="6"/><text x="64.1613%" y="127.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.20%)</title><rect x="65.1210%" y="133" width="0.2016%" height="15" fill="rgb(233,223,10)" fg:x="323" fg:w="1"/><text x="65.3710%" y="143.50"></text></g><g><title>ch7`core::slice::sort::recurse (3 samples, 0.60%)</title><rect x="65.3226%" y="133" width="0.6048%" height="15" fill="rgb(215,21,27)" fg:x="324" fg:w="3"/><text x="65.5726%" y="143.50"></text></g><g><title>ch7`core::slice::sort::insertion_sort_shift_left (3 samples, 0.60%)</title><rect x="65.3226%" y="117" width="0.6048%" height="15" fill="rgb(232,23,21)" fg:x="324" fg:w="3"/><text x="65.5726%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.20%)</title><rect x="69.7581%" y="101" width="0.2016%" height="15" fill="rgb(244,5,23)" fg:x="346" fg:w="1"/><text x="70.0081%" y="111.50"></text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 1.41%)</title><rect x="69.5565%" y="117" width="1.4113%" height="15" fill="rgb(226,81,46)" fg:x="345" fg:w="7"/><text x="69.8065%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 1.01%)</title><rect x="69.9597%" y="101" width="1.0081%" height="15" fill="rgb(247,70,30)" fg:x="347" fg:w="5"/><text x="70.2097%" y="111.50"></text></g><g><title>ch7`alloc::raw_vec::finish_grow (1 samples, 0.20%)</title><rect x="72.5806%" y="85" width="0.2016%" height="15" fill="rgb(212,68,19)" fg:x="360" fg:w="1"/><text x="72.8306%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.20%)</title><rect x="72.7823%" y="85" width="0.2016%" height="15" fill="rgb(240,187,13)" fg:x="361" fg:w="1"/><text x="73.0323%" y="95.50"></text></g><g><title>ch7`ray_tracer::rtc::object::Object::intersect (36 samples, 7.26%)</title><rect x="65.9274%" y="133" width="7.2581%" height="15" fill="rgb(223,113,26)" fg:x="327" fg:w="36"/><text x="66.1774%" y="143.50">ch7`ray_tr..</text></g><g><title>ch7`ray_tracer::rtc::shapes::sphere::Sphere::intersect (11 samples, 2.22%)</title><rect x="70.9677%" y="117" width="2.2177%" height="15" fill="rgb(206,192,2)" fg:x="352" fg:w="11"/><text x="71.2177%" y="127.50">c..</text></g><g><title>ch7`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.81%)</title><rect x="72.3790%" y="101" width="0.8065%" height="15" fill="rgb(241,108,4)" fg:x="359" fg:w="4"/><text x="72.6290%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.20%)</title><rect x="72.9839%" y="85" width="0.2016%" height="15" fill="rgb(247,173,49)" fg:x="362" fg:w="1"/><text x="73.2339%" y="95.50"></text></g><g><title>ch7`ray_tracer::rtc::shapes::sphere::Sphere::intersect (3 samples, 0.60%)</title><rect x="73.1855%" y="133" width="0.6048%" height="15" fill="rgb(224,114,35)" fg:x="363" fg:w="3"/><text x="73.4355%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 4.84%)</title><rect x="73.7903%" y="133" width="4.8387%" height="15" fill="rgb(245,159,27)" fg:x="366" fg:w="24"/><text x="74.0403%" y="143.50">libsys..</text></g><g><title>ch7`ray_tracer::rtc::world::World::intersect (92 samples, 18.55%)</title><rect x="62.5000%" y="149" width="18.5484%" height="15" fill="rgb(245,172,44)" fg:x="310" fg:w="92"/><text x="62.7500%" y="159.50">ch7`ray_tracer::rtc::world::W..</text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 2.42%)</title><rect x="78.6290%" y="133" width="2.4194%" height="15" fill="rgb(236,23,11)" fg:x="390" fg:w="12"/><text x="78.8790%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.20%)</title><rect x="81.0484%" y="149" width="0.2016%" height="15" fill="rgb(205,117,38)" fg:x="402" fg:w="1"/><text x="81.2984%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 3.43%)</title><rect x="81.2500%" y="149" width="3.4274%" height="15" fill="rgb(237,72,25)" fg:x="403" fg:w="17"/><text x="81.5000%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 1.41%)</title><rect x="84.6774%" y="149" width="1.4113%" height="15" fill="rgb(244,70,9)" fg:x="420" fg:w="7"/><text x="84.9274%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.60%)</title><rect x="86.0887%" y="149" width="0.6048%" height="15" fill="rgb(217,125,39)" fg:x="427" fg:w="3"/><text x="86.3387%" y="159.50"></text></g><g><title>ch7`ray_tracer::rtc::world::World::is_shadowed (134 samples, 27.02%)</title><rect x="60.2823%" y="165" width="27.0161%" height="15" fill="rgb(235,36,10)" fg:x="299" fg:w="134"/><text x="60.5323%" y="175.50">ch7`ray_tracer::rtc::world::World::is_shado..</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.60%)</title><rect x="86.6935%" y="149" width="0.6048%" height="15" fill="rgb(251,123,47)" fg:x="430" fg:w="3"/><text x="86.9435%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.20%)</title><rect x="87.2984%" y="165" width="0.2016%" height="15" fill="rgb(221,13,13)" fg:x="433" fg:w="1"/><text x="87.5484%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 2.82%)</title><rect x="87.5000%" y="165" width="2.8226%" height="15" fill="rgb(238,131,9)" fg:x="434" fg:w="14"/><text x="87.7500%" y="175.50">li..</text></g><g><title>ch7`ray_tracer::rtc::world::World::color_at (263 samples, 53.02%)</title><rect x="37.9032%" y="181" width="53.0242%" height="15" fill="rgb(211,50,8)" fg:x="188" fg:w="263"/><text x="38.1532%" y="191.50">ch7`ray_tracer::rtc::world::World::color_at</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.60%)</title><rect x="90.3226%" y="165" width="0.6048%" height="15" fill="rgb(245,182,24)" fg:x="448" fg:w="3"/><text x="90.5726%" y="175.50"></text></g><g><title>ch7`ray_tracer::rtc::world::World::intersect (5 samples, 1.01%)</title><rect x="90.9274%" y="181" width="1.0081%" height="15" fill="rgb(242,14,37)" fg:x="451" fg:w="5"/><text x="91.1774%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 2.42%)</title><rect x="91.9355%" y="181" width="2.4194%" height="15" fill="rgb(246,228,12)" fg:x="456" fg:w="12"/><text x="92.1855%" y="191.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 2.62%)</title><rect x="94.3548%" y="181" width="2.6210%" height="15" fill="rgb(213,55,15)" fg:x="468" fg:w="13"/><text x="94.6048%" y="191.50">li..</text></g><g><title>ch7`ray_tracer::rtc::camera::Camera::render (314 samples, 63.31%)</title><rect x="34.2742%" y="197" width="63.3065%" height="15" fill="rgb(209,9,3)" fg:x="170" fg:w="314"/><text x="34.5242%" y="207.50">ch7`ray_tracer::rtc::camera::Camera::render</text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.60%)</title><rect x="96.9758%" y="181" width="0.6048%" height="15" fill="rgb(230,59,30)" fg:x="481" fg:w="3"/><text x="97.2258%" y="191.50"></text></g><g><title>ch7`ray_tracer::rtc::world::World::color_at (2 samples, 0.40%)</title><rect x="97.5806%" y="197" width="0.4032%" height="15" fill="rgb(209,121,21)" fg:x="484" fg:w="2"/><text x="97.8306%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.40%)</title><rect x="97.9839%" y="197" width="0.4032%" height="15" fill="rgb(220,109,13)" fg:x="486" fg:w="2"/><text x="98.2339%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 1.01%)</title><rect x="98.3871%" y="197" width="1.0081%" height="15" fill="rgb(232,18,1)" fg:x="488" fg:w="5"/><text x="98.6371%" y="207.50"></text></g><g><title>all (496 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="496"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (496 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="496"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>ch7`main (496 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="496"/><text x="0.2500%" y="303.50">ch7`main</text></g><g><title>ch7`std::rt::lang_start (496 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="496"/><text x="0.2500%" y="287.50">ch7`std::rt::lang_start</text></g><g><title>ch7`std::rt::lang_start_internal (496 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="496"/><text x="0.2500%" y="271.50">ch7`std::rt::lang_start_internal</text></g><g><title>ch7`std::rt::lang_start::_{{closure}} (496 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="496"/><text x="0.2500%" y="255.50">ch7`std::rt::lang_start::_{{closure}}</text></g><g><title>ch7`std::sys_common::backtrace::__rust_begin_short_backtrace (496 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="496"/><text x="0.2500%" y="239.50">ch7`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ch7`ch7::main (496 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="496"/><text x="0.2500%" y="223.50">ch7`ch7::main</text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.60%)</title><rect x="99.3952%" y="197" width="0.6048%" height="15" fill="rgb(207,46,11)" fg:x="493" fg:w="3"/><text x="99.6452%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.60%)</title><rect x="99.3952%" y="181" width="0.6048%" height="15" fill="rgb(241,35,35)" fg:x="493" fg:w="3"/><text x="99.6452%" y="191.50"></text></g></svg></svg>